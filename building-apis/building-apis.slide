Building APIs
The Golang UK Conference, London
21 Aug 2015
Tags: APIs, RESTful, JSON, Data, Golang

Mat Ryer
https://github.com/matryer
@matryer

* About me

- Been coding since age 6
- Been Go-ing since `r59`
- Using Go in anger since 2011
- In love with test-driven development
- Founded *Testify* and other less successful packages
- Just joined GrayMeta, Inc.
- Author of Go Programming Blueprints

.image gopher-mat.png

* Book: Go Programming Blueprints

.image go-blueprints.jpg
.image review.png

[[http://bit.ly/goblueprints]]

* Building APIs

* When you say API...?

Everything is an API - including:

- Packages
  assert.Equal(a, b, "a should equal b")
- Types
  type Worker interface {
  	Stop() <-chan struct{}
  	Start() error
  }
- Functions
  func Something(in io.Reader, out io.Writer) error

* I'm talking about Web APIs

* Why Go?

- (Very) rapid dev
- Production ready
.code production_ready.go /START OMIT/,/END OMIT/
- We â™¥ Go

* Going

.image trend.png 300 _

Google trend for "Golang"

* Let's go

* Building APIs in Go

- Use the standard library for as long as possible
- You may not need an external package at all
- Use `http.Handler` and `http.HandlerFunc`

.code handler.go

Remember this signature

  func(w http.ResponseWriter, r *http.Request)

* http.ResponseWriter

  // A ResponseWriter interface is used by an HTTP handler to
  // construct an HTTP response.
  type ResponseWriter interface {

    Header() Header
    Write([]byte) (int, error)
    WriteHeader(int)

  }

from [[http://golang.org/src/net/http/server.go?s=1517:2599#L48]]

* http.Request

`http.Request` contains everything you need to know about the request. 

- `r.Method` - HTTP method (`GET`, `POST`, `PUT`, `PATCH`, `DELETE` etc.)
- `r.URL.Path` - Request path (`/things/123`)
- `r.URL.String()` - Full URL
- `r.URL.Query()` - Query parameters (`q=something&p=2`)
- `r.Body` - io.ReadCloser of the request body

* Routing

- `GET` `/things` `->` `handleThings`

.code routes.go /START OMIT/,/END OMIT/

- Standard library until you need something more

Beware:

- / matches *everything*
- No path parameter parsing
- One handler for every HTTP method

You could code this yourself... or maybe it's a good excuse to use a package?

* Routing package

- Gorilla mux - [[https://github.com/gorilla/mux]]

.code gorilla-mux.go /START OMIT/,/END OMIT/

- see also httprouter - [[https://github.com/julienschmidt/httprouter]] (but it breaks the ServeHTTP signature)

* Responding with data

- Grow your own `respond` function
- Mirror `ServeHTTP` signature (even though we're not using `*http.Request` yet)

.code responding.go /START OMIT/,/END OMIT/

* respond package

.code respond-package.go /START OMIT/,/END OMIT/

- see [[https://github.com/matryer/respond]]

* Options for responding

.code respond-options.go /START OMIT/,/END OMIT/

* Public pattern

  type Public interface {
    Public() interface{}
  }

  func respond(w http.ResponseWriter, r *http.Request, status int, data interface{}) {
    if obj, ok := data.(Public); ok {
      data = obj.Public()
    }
    //...
  }

  type User struct {
    ID           OurID
    Name         string
    PasswordHash string
  }
  func (u *User) Public() interface{} {
    return map[string]interface{}{
      "id":   u.ID.Encode(),
      "name": u.Name,
    }
  }

* Decoding data from Request

.code decode-helper.go /START OMIT/,/END OMIT/

Can be improved later to:

- Check the `Content-Type` header to use different decoders
- Allow URL parameters to influence how the decoder works
- Go a little further and validate the input too...

* OK pattern

Implement a simple interface:

  type ok interface {
    OK() error
  }

Update decode helper:

.code decode-helper-withok.go /START OMIT/,/END OMIT/

* OK pattern example

  type Gopher struct {
    Name string
    Country string
  }

  func (g *Gopher) OK() error {
    if len(g.Name) == 0 {
      return ErrRequired("name")
    }
    if len(g.Country) == 0 {
      return ErrRequired("country")
    }
    return nil
  }

  func handleCreateGopher(w http.ResponseWriter, r *http.Request) {
    var g gopher
    if err := decode(r, &g); err != nil {
      respond.With(w, r, http.StatusBadRequest, err)
      return
    }
    respond.With(w, r, http.StatusOK, &g)
  }

* Different type for new things

- New things are different to existing things

  type NewGopher struct {
    Name            string
    Email           string
    Password        string
    PasswordConfirm string
  }

  type Gopher struct {
    ID           string `json:"id"`
    Name         string `json:"name"`
    Email        string `json:"email"`
    PasswordHash string `json:"-"`
  }

  // Save saves a NewGopher and returns the Gopher.
  func (g *NewGopher) Save(db *mgo.Database) (*Gopher, error) {

    // ...

  }

* Writing middleware

- Run code before and after handler code

.code wrapping.go /START OMIT/,/END OMIT/

* Don't break the interface

Some people do this:

  func(w http.ResponseWriter, r *http.Request, db *mgo.Session, logger *log.Logger)

But I prefer this:

  func(w http.ResponseWriter, r *http.Request)

And I don't mind this:

  type Server struct {
    logger  *log.Logger
    mailer  MailSender
    slack   Notifier
  }

  func (s *Server) handleSomething(w http.ResponseWriter, r *http.Request) {...}

  func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {...}

* Sharing data across handlers

Enter Gorilla context package - [[https://github.com/gorilla/context]]

- Doesn't break the interface
- Provides a `map[string]interface{}` per Request
- Easy to clean up (using its own `http.Handler` wrapper)
- Use `context.Set` and `context.Get`

  func prepareSomething(w http.ResponseWriter, r *http.Request) {
    context.Set(r, "logger", logger)
  }

  func handleSomethingElse(w http.ResponseWriter, r *http.Request) {
    logger := context.Get(r, "logger").(*log.Logger)
  }

* Real world example: Database connection

Almost every API will interact with some kind of datastore.

We need to:

- Connect when program is first run (expensive)
- Disconnect when the program is terminated
- Create a session per request (cheap)
- Clean up after each request

* MongoDB wrapper using context

.code mongodb.go /START OMIT/,/END OMIT/

* Using the MongoDB wrapper

.code -numbers mongodb2.go /START OMIT/,/END OMIT/

* Request lifecycle

- Client hits `GET` `\things`
- `mux.Router` passes the request to `WithDB`
- `WithDB` copies database session and stores it in the context
- `WithDB` then calls the wrapped handler (`handleThingsRead`)
- `handleThingsRead` gets the database session from the context, uses it and responds
- Execution then passes back to `WithDB` which exits and the deferred `Close()` function is called - cleaning up the copy
- `context.ClearHandler` then cleans up the context map for this Request

* Adapter interface

.code adapter.go /START OMIT/,/END OMIT/

* Other adapters

.code other-adapters.go /START OMIT/,/END OMIT/

* Using adapters

.code using-adapters.go /START OMIT/,/END OMIT/

* Use flags for environment configuration

.code flags.go /START OMIT/,/END OMIT/

Then run it with:

  ./myapi -mongo=$DB_PORT_27017_TCP_ADDR

* Testing (ideally TDD)

* Great tests

- Test one thing
- If that thing breaks, only one test fails
- Repeatable
- Don't rely on run order
- Don't require external resources

* Unit testing handlers

- Use `net/http/httptest` from Std lib

.play handler_test.go /START OMIT/,/END OMIT/

* Integration testing (table driven)

.code table_test.go /START OMIT/,/END OMIT/

- Real Go code
- Nothing new to learn

* Table driven tests (runner)

.play table_test2.go /START OMIT/,/END OMIT/

- Making real HTTP requests
- Tests the full stack (including middleware)

* Setup and teardown for each test

  var server *httptest.Server

  func setup() {
    server = httptest.NewServer(&myAPIHandler{})
  }

  func teardown() {
    server.Close()
  }

  func TestSomething(t *testing.T) {
    setup()
    defer teardown()

    // TODO: write test with fresh server
  }

* Shout out: Women who go

- Supporting women in the Go community
- [[https://twitter.com/womenwhogo]]
- [[http://womenwhogo.org]]

* Questions?